{"version":3,"sources":["vendor/epics2web.js","utils/Network.js","utils/Epics.js","utils/Colors.js","components/SettingsDialog.jsx","components/PressureBar.jsx","utils/consts.js","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","ClientConnection","options","defaultOptions","url","location","protocol","host","autoOpen","autoReconnect","autoLivenessPingAndTimeout","autoDisplayClasses","pingIntervalMillis","livenessTimoutMillis","reconnectWaitMillis","chunkedRequestPvsCount","clientName","href","key","this","socket","eventElem","createElement","lastUpdated","livenessTimer","reconnecting","addEventListener","onopen","onclose","onconnecting","onclosing","onerror","onmessage","oninfo","onupdate","onpong","bind","removeEventListener","dispatchEvent","open","readyState","WebSocket","CLOSED","console","log","u","encodeURIComponent","clearTimeout","isClosed","setTimeout","Date","json","JSON","parse","data","date","type","close","code","reason","monitorPvs","pvs","i","j","chunk","length","slice","monitorPvsChunk","msg","send","stringify","clearPvs","clearPvsChunk","ping","setInterval","OPEN","jlab","createClientConnection","Jlab","instance","epics2web","isNumericEpicsType","datatype","isNumeric","Network","secure","epics2webHost","epics2webLocation","epics2webGet","epics2webWs","epics2webOptions","Object","freeze","Epics","monitoredPVsList","disconnect","con","network","pvData","forEach","element","value","count","e","pv","Color","MAJOR_BG","MAJOR_LINE","OK_BG","OK_LINE","MINOR_BG","MINOR_LINE","INVALID_BG","INVALID_LINE","HOVER_LINE","SettingsDialog","props","handleClickOpen","setState","handleClose","handleAlarmState","highVal","hihiVal","state","err","parseFloat","hihiError","isNaN","highError","handleConfig","hihi","high","Button","startIcon","size","style","margin","variant","color","onClick","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","component","Grid","container","direction","justify","alignItems","TextField","padding","error","label","defaultValue","onChange","target","DialogActions","React","Component","defaults","global","defaultFontColor","defaultFontSize","PressureBar","updatePVValues","minorVal","majorVal","values","map","epics","valuesMax","Math","max","alarms","bg","border","updateContent","minorArray","majorArray","maxVal","chartData","labels","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","fill","pointRadius","datalabels","display","tooltipText","tooltipVisible","timer","refreshInterval","prevProps","prevState","snapshot","clearInterval","customTooltipCallback","plugins","ChartDataLabels","rotation","font","weight","tooltips","mode","enabled","custom","maintainAspectRatio","responsive","legend","position","align","scales","xAxes","ticks","gridLines","zeroLineColor","yAxes","scaleLabel","labelString","min","fontSize","backHandler","className","renderBar","defaultProps","SI","BO","STATE","App","tooltipModel","opacity","x","dataPoints","xLabel","y","yLabel","tooltipX","tooltipY","renderNav","content","ButtonGroup","orientation","renderCustomTooltip","renderGraph","bo","tb","ts","si","fe","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3ba596de.chunk.js","sourcesContent":["\n/* BEGIN IE CustomEvent POLYFILL */\n(function () {\n    if (typeof window.CustomEvent === \"function\") {\n        return false;\n    }\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n})();\n/* END IE CustomEvent POLYFILL */\n\nclass ClientConnection {\n    constructor(options) {\n        options = (!options) ? {} : options;\n\n        let protocol = (window.location.protocol === 'https:') ? 'wss:' : 'ws:';\n\n        let defaultOptions = {\n            url: protocol + \"//\" + window.location.host + \"/epics2web/monitor\",\n            autoOpen: true, /* Will automatically connect to socket immediately instead of waiting for open function to be called */\n            autoReconnect: true, /* If socket is closed, will automatically reconnect after reconnectWaitMillis */\n            autoLivenessPingAndTimeout: true, /* Will ping the server every pingIntervalMillis and if no response in livenessTimeoutMillis then will close the socket as invalid */\n            autoDisplayClasses: true, /* As connect state changes will hide and show elements with corresponding state classes: ws-disconnected, ws-connecting, ws-connected */\n            pingIntervalMillis: 3000, /* Time to wait between pings */\n            livenessTimoutMillis: 2000, /* Max time allowed for server to respond to a ping (via any message) */\n            reconnectWaitMillis: 1000, /* Time to wait after socket closed before attempting reconnect */\n            chunkedRequestPvsCount: 400, /* Max number of PVs to transmit in a chunked monitor or clear command; 0 to disable chunking */\n            clientName: window.location.href /* Client name is a string used for informational/debugging purposes (appears in console) */\n        };\n\n        for (let key in defaultOptions) {\n            if (typeof options[key] !== 'undefined') {\n                this[key] = options[key];\n            } else {\n                this[key] = defaultOptions[key];\n            }\n        }\n\n\n        // Private variables\n        this.socket = null;\n        this.eventElem = document.createElement('div');\n        this.lastUpdated = null;\n        this.livenessTimer = null;\n        this.reconnecting = false;\n\n        // Private functions\n        var doPingWithTimer = () =>{\n            /*console.log('pingWithTimer');*/\n            if (this.socket !== null && this.socket.readyState === WebSocket.OPEN) {\n                this.ping();\n\n                if (this.livenessTimer !== null) {\n                    /*console.log('pingWithTimer triggered while liveness timer running (keepAliveTimeout > keepAliveInterval)?');*/\n                } else {\n                    this.livenessTimer = setTimeout(function () {\n                        /*console.log('server liveness timer triggered');*/\n\n                        /*var elapsedMillis = Math.abs(new Date() - lastUpdated);\n                         \n                         console.log('Elapsed Millis: ' + elapsedMillis);\n                         console.log('Keepalive Timeout Millis: ' + self.livenessTimoutMillis);\n                         \n                         if(elapsedMillis > self.livenessTimoutMillis) {\n                         console.log('Ping/Pong Timeout');*/\n                        if (this.socket.readyState === WebSocket.OPEN) {\n                            this.socket.close();\n                        }\n                        //}\n\n                        this.livenessTimer = null;\n                    }, this.livenessTimoutMillis);\n                }\n            } else {\n                /*console.log('socket is not open: onclose may try to reconnect after a delay if not already reconnecting');*/\n            }\n        };\n\n        // Event wiring\n        this.eventElem.addEventListener('open',       (event) => { this.onopen(event); });\n        this.eventElem.addEventListener('close',      (event) => { this.onclose(event); });\n        this.eventElem.addEventListener('connecting', (event) => { this.onconnecting(event); });\n        this.eventElem.addEventListener('closing',    (event) => { this.onclosing(event); });\n        this.eventElem.addEventListener('error',      (event) => { this.onerror(event); });\n        this.eventElem.addEventListener('message',    (event) => { this.onmessage(event); });\n        this.eventElem.addEventListener('info',       (event) => { this.oninfo(event); });\n        this.eventElem.addEventListener('update',     (event) => { this.onupdate(event); });\n        this.eventElem.addEventListener('pong',       (event) => { this.onpong(event); });\n\n        this.addEventListener = this.eventElem.addEventListener.bind(this.eventElem);\n        this.removeEventListener = this.eventElem.removeEventListener.bind(this.eventElem);\n        this.dispatchEvent = this.eventElem.dispatchEvent.bind(this.eventElem);\n\n        // Public functions\n        this.open = () => {\n            if (this.socket === null || this.socket.readyState === WebSocket.CLOSED) {\n                var event = new CustomEvent('connecting');\n                this.eventElem.dispatchEvent(event);\n\n                let u = this.url;\n\n                if (this.clientName !== null) {\n                    u = u + '?clientName=' + encodeURIComponent(this.clientName);\n                }\n\n                this.socket = new WebSocket(u);\n\n                this.socket.onerror = (event) => {\n                    console.log(\"server connection error\", event);\n\n                    var evt = new CustomEvent('error');\n                    this.eventElem.dispatchEvent(evt);\n                };\n\n                this.socket.onclose = (event) => {\n                    console.log(\"server connection closed\");\n                    // console.log(event.reason);\n\n                    var evt = new CustomEvent('close');\n                    this.eventElem.dispatchEvent(evt);\n\n                    if (this.livenessTimer !== null) {\n                        clearTimeout(this.livenessTimer);\n                        this.livenessTimer = null;\n                    }\n\n                    var isClosed = this.socket === null || this.socket.readyState === WebSocket.CLOSED;\n                    if (this.autoReconnect && !this.reconnecting && isClosed) {\n                        console.log('attempting to reconnect after delay');\n                        this.reconnecting = true;\n                        setTimeout(() => {\n                            console.log('reconnect timer triggered');\n                            this.open();\n                            this.reconnecting = false;\n                        }, this.reconnectWaitMillis);\n                    } else {\n                        console.log('socket is not closed (socket is connecting, closing, or reconnecting / delayed connecting)');\n                    }\n                };\n\n                this.socket.onmessage = (event) => {\n                    // console.log('on message', event.data);\n\n                    if (this.livenessTimer !== null) {\n                        clearTimeout(this.livenessTimer);\n                        this.livenessTimer = null;\n                    }\n\n                    this.lastUpdated = new Date();\n                    var json = JSON.parse(event.data);\n                    json.date = this.lastUpdated;\n                    if (json.type === 'update') {\n                        this.eventElem.dispatchEvent(new CustomEvent('update', { 'detail': json }));\n                    } else if (json.type === 'info') {\n                        this.eventElem.dispatchEvent(new CustomEvent('info', { 'detail': json }));\n                    } else if (json.type === 'pong') {\n                        this.eventElem.dispatchEvent(new CustomEvent('pong'));\n                    }\n\n                    this.eventElem.dispatchEvent(new CustomEvent('message'), { 'detail': json });\n                };\n\n                this.socket.onopen = (event) => {\n                    console.log('server connection open');\n                    this.lastUpdated = new Date();\n\n                    var evt = new CustomEvent('open');\n                    this.eventElem.dispatchEvent(evt);\n                };\n            } else {\n                console.log('already connected');\n                return 1;\n            }\n        };\n\n        this.close = (code, reason) => {\n            console.log('close');\n            if (this.socket !== null && this.socket.readyState !== WebSocket.CLOSED) {\n                if (typeof code === 'undefined') {\n                    code = 1000;\n                }\n                this.socket.close(code, reason);\n            } else {\n                console.log('already closed');\n            }\n        };\n\n        this.monitorPvs = (pvs) => {\n            if (this.chunkedRequestPvsCount > 0) {\n                var i, j, chunk;\n                for (i = 0, j = pvs.length; i < j; i += this.chunkedRequestPvsCount) {\n                    chunk = pvs.slice(i, i + this.chunkedRequestPvsCount);\n                    this.monitorPvsChunk(chunk);\n                }\n            } else {\n                this.monitorPvsChunk(pvs);\n            }\n        };\n\n        this.monitorPvsChunk = (pvs) => {\n            var msg = { type: 'monitor', pvs: pvs };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        this.clearPvs = (pvs) => {\n            if (this.chunkedRequestPvsCount > 0) {\n                var i, j, chunk;\n                for (i = 0, j = pvs.length; i < j; i += this.chunkedRequestPvsCount) {\n                    chunk = pvs.slice(i, i + this.chunkedRequestPvsCount);\n                    this.clearPvsChunk(chunk);\n                }\n            } else {\n                this.clearPvsChunk(pvs);\n            }\n        };\n\n        this.clearPvsChunk = (pvs) => {\n            var msg = { type: 'clear', pvs: pvs };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        this.ping = () => {\n            var msg = { type: 'ping' };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        if (this.autoDisplayClasses === true) {\n            this.eventElem.addEventListener('connecting', (event) =>{\n                console.log('connecting');\n            });\n            this.eventElem.addEventListener('open', (event) =>{\n                console.log('open');\n            });\n            this.eventElem.addEventListener('close', (event) =>{\n                console.log('close');\n            });\n        }\n\n        if (this.autoOpen === true) {\n            this.open();\n        }\n\n        if (this.autoLivenessPingAndTimeout === true) {\n            window.setInterval(doPingWithTimer, this.pingIntervalMillis);\n        }\n    }\n\n}\n\nClientConnection.prototype.onopen = function () { };\nClientConnection.prototype.onclose = function () { };\nClientConnection.prototype.onconnecting = function () { };\nClientConnection.prototype.onclosing = function () { };\nClientConnection.prototype.onmessage = function () { };\nClientConnection.prototype.onerror = function () { };\nClientConnection.prototype.onupdate = function () { };\nClientConnection.prototype.oninfo = function () { };\nClientConnection.prototype.onpong = function () { };\n\nclass Jlab {\n    constructor() {\n        if (!Jlab.instance) {\n            Jlab.instance = this;\n            this.epics2web = {};\n            // this.contextPrefix = '';\n        }\n    }\n\n    createClientConnection = (options)=> { return new ClientConnection(options) };\n    \n}\n\nconst jlab = new Jlab();\n\njlab.epics2web.isNumericEpicsType = function (datatype) {\n    var isNumeric;\n\n    switch (datatype) {\n        case 'DBR_DOUBLE':\n        case 'DBR_FLOAT':\n        case 'DBR_INT':\n        case 'DBR_SHORT':\n        case 'DBR_BYTE':\n            isNumeric = true;\n            break;\n        default:\n            isNumeric = false;\n    }\n\n    return isNumeric;\n};\n\nexport { jlab };","class Network {\n    constructor() {\n        if (!Network.instance) {\n            Network.instance = this;\n        }\n        this.secure = window.location.protocol === 'https:';\n        this.epics2webHost = '10.0.38.42';\n        this.epics2webLocation = '/epics2web';\n        this.epics2webGet = this.secure ? 'https://' : 'http://' + this.epics2webHost + this.epics2webLocation + '/caget';\n        this.epics2webWs =\n            this.secure ? 'wss://' : 'ws://' + this.epics2webHost + this.epics2webLocation + '/monitor';\n        this.epics2webOptions = {\n            url: this.epics2webWs,\n            autoOpen: true,\n            autoReconnect: true,\n            autoLivenessPingAndTimeout: true,\n            autoDisplayClasses: true,\n            pingIntervalMillis: 3000,\n            livenessTimoutMillis: 2000,\n            reconnectWaitMillis: 1000,\n            chunkedRequestPvsCount: 400\n        };\n\n        return Network.instance;\n    }\n}\n\nconst instance = new Network();\nObject.freeze(instance);\n\nexport { instance as network };\n\n","import { jlab } from '../vendor/epics2web';\nimport { network } from '../utils/Network';\n\nclass Epics {\n    constructor(monitoredPVsList) {\n        this.monitoredPVsList = monitoredPVsList;\n\n        this.con = jlab.createClientConnection(network.epics2webOptions);\n\n        this.pvData = {}\n        this.monitoredPVsList.forEach(element => {\n            this.pvData[element] = { date:null, value:null, datatype:null, count:null};\n        });\n\n        this.con.onopen = (e) => {\n            // console.log('Socket Connected');\n            this.con.monitorPvs(this.monitoredPVsList);\n        };\n\n        this.con.onupdate = (e) => {\n            // console.log('PV: ', e.detail.pv, e.detail.date, e.detail.value);\n            this.pvData[e.detail.pv].date = e.detail.date;\n            this.pvData[e.detail.pv].value = e.detail.value;\n        };\n\n        this.con.oninfo = (e) => {\n            // console.log('Info: ', e.detail);\n\n            this.pvData[e.detail.pv].datatype = e.detail.datatype;\n            this.pvData[e.detail.pv].count = e.detail.count;\n            this.pvData[e.detail.pv].date = e.detail.date;\n\n            if (typeof e.detail['enum-labels'] !== 'undefined') {\n                console.log('Enum Labels: ' + e.detail['enum-labels']);\n            }\n        };\n    }\n\n    disconnect = ()=>{\n        if(this.con){\n            this.con.autoReconnect = false;\n            this.con.close();\n            this.monitoredPVsList = [];\n        }\n    }\n}\nexport default Epics;","class Color{\n    constructor(){\n        if(! Color.instance){\n            Color.instance = this;\n        }\n\n        this.MAJOR_BG = 'rgba(245,0,0,0.8)';\n        this.MAJOR_LINE = 'rgba(245,0,0,1)';\n\n        this.OK_BG = 'rgba(65,190,60,0.9)';\n        this.OK_LINE = 'rgba(65,190,60,0.6)';\n\n        this.MINOR_BG = 'rgba(359, 200, 0, 0.8)';\n        this.MINOR_LINE = 'rgba(359 ,200, 0, 1)';\n\n        this.INVALID_BG = 'rgba(255, 0, 183, 0.8)'\n        this.INVALID_LINE = 'rgba(255, 0, 183, 1)'\n\n        this.HOVER_LINE = '#FFFFFF';\n\n        return Color.this;\n    }\n}\n\nconst instance = new Color();\nObject.freeze(instance);\n\nexport {instance as color};\n","import React from 'react';\n\nimport { Button, Grid, TextField, Dialog, DialogActions, DialogContent, DialogTitle} from '@material-ui/core';\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\n\nclass SettingsDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            handleConfig: null,\n            open: false,\n            hihiError: false,\n            highError: false,\n            hihiVal: props.hihi,\n            highVal: props.high\n        };\n\n    }\n\n    handleClickOpen = () => {\n        this.setState({ open: true });\n    };\n\n    handleClose = () => {\n        this.setState({ open: false });\n    };\n\n    handleAlarmState = (highVal, hihiVal) => {\n        this.setState((state, props) => {\n            if (highVal == null) { highVal = state.highVal; }\n            if (hihiVal == null) { hihiVal = state.hihiVal; }\n            const err = (parseFloat(highVal) >= parseFloat(hihiVal));\n            return {\n                hihiVal: hihiVal,\n                highVal: highVal,\n                hihiError: isNaN(hihiVal) || hihiVal === '' || err,\n                highError: isNaN(highVal) || highVal === '' || err,\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Button startIcon={<SettingsRoundedIcon/>} size='small' style={{ margin: '2px' }} variant=\"contained\" color=\"primary\" onClick={this.handleClickOpen}> Settings\n            </Button>\n                <Dialog open={this.state.open} onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\" >\n                    <DialogTitle id=\"alert-dialog-title\">{this.props.title}</DialogTitle>\n                    <DialogContent component={'span'}>\n                        <Grid\n                            container\n                            direction=\"column\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                        >\n\n                            <TextField\n                                style={{ padding: '5px' }}\n                                error={this.state.hihiError}\n                                label=\"Major alarm (HIHI)\"\n                                defaultValue={this.props.hihi}\n                                value={this.state.hihiVal}\n                                onChange={(evt) => this.handleAlarmState(null, evt.target.value)}\n                            />\n                            <TextField\n                                style={{ padding: '5px' }}\n                                error={this.state.highError}\n                                label=\"Minor alarm (HIGH)\"\n                                defaultValue={this.props.high}\n                                value={this.state.highVal}\n                                onChange={(evt) => this.handleAlarmState(evt.target.value, null)}\n                            />\n\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => {\n                                if (!this.state.highError && !this.state.hihiError) {\n                                    this.props.handleConfig(\n                                        this.state.hihiVal ? this.state.hihiVal : this.props.hihi,\n                                        this.state.highVal ? this.state.highVal : this.props.high);\n                                    this.handleClose();\n                                }\n                            }}\n                            variant=\"contained\" color=\"primary\">OK</Button>\n                        <Button onClick={() => { this.handleClose() }} variant=\"contained\" color=\"secondary\">Close</Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\nexport default SettingsDialog;\n","\nimport React from 'react';\nimport { Bar, defaults } from 'react-chartjs-2';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nimport Epics from '../utils/Epics';\nimport { color } from '../utils/Colors';\nimport \"./PressureBar.css\";\nimport { Button } from '@material-ui/core';\n\nimport SettingsDialog from './SettingsDialog';\n\ndefaults.global.defaultFontColor = \"#FFF\";\ndefaults.global.defaultFontSize = 16;\n\nclass PressureBar extends React.Component {\n  static defaultProps = { title: \"A graph\" };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tooltipText: \"\",\n      tooltipVisible: false,\n      minorVal: props.high ? props.high : 1e-8,\n      minorArray: props.pvs.map(() => props.high ? props.high : 1e-8),\n      majorVal: props.hihi ? props.hihi : 1e-7,\n      majorArray: props.pvs.map(() => props.hihi ? props.hihi : 1e-7),\n      maxVal: null,\n    };\n\n    this.timer = null;\n    this.refreshInterval = 100;\n    this.epics = new Epics(this.props.pvs);\n\n    this.values = [];\n    this.alarms = { bg: [], border: [] };\n    this.max = this.state.majorVal;\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) { /** Check if there's a new PV list */ }\n\n  updatePVValues = () => {\n    /** Refresh PV val array */\n    const { minorVal, majorVal } = this.state;\n    const { pvs } = this.props;\n\n    this.values = pvs.map(pv => { return this.epics.pvData[pv].value; });\n    this.valuesMax = Math.max(...this.values);\n\n    this.alarms.bg = this.values.map(value => {\n      if (value && !isNaN(value)) {\n        if (value < minorVal) {\n          return color.OK_BG;\n        } else if (value >= minorVal && value < majorVal) {\n          return color.MINOR_BG;\n        } else {\n          return color.MAJOR_BG;\n        }\n      } else {\n        /** I'm returning OK here so because invalid numbers will not be plotted\n         * so this will only mess up the legend in case the first PV is invalid */\n        return color.OK_BG;\n      }\n    });\n\n    this.alarms.border = this.values.map(value => {\n      if (value && !isNaN(value)) {\n        if (value < minorVal) {\n          return color.OK_LINE;\n        } else if (value >= minorVal && value < majorVal)\n          return color.MINOR_LINE;\n      } else {\n        /** Same as the alarm.bg*/\n        return color.OK_LINE;\n      }\n    });\n  }\n\n  updateContent = () => {\n    this.updatePVValues();\n\n    this.setState((state, props) => {\n      const { minorVal, majorVal, minorArray, majorArray } = state;\n      const { pvs } = props;\n\n      const maxVal = (this.valuesMax > majorVal) ? this.valuesMax : majorVal;\n\n      let data = {\n        labels: pvs,\n        datasets: [\n          {\n            label: 'MKS - Cold Cathode',\n            backgroundColor: this.alarms.bg,\n            borderColor: this.alarms.border,\n            borderWidth: 1,\n            hoverBackgroundColor: color.OK_BG,\n            hoverBorderColor: color.HOVER_LINE,\n            data: this.values,\n          },\n          {\n            label: 'Minor Alarm',\n            type: 'line',\n            fill: false,\n            backgroundColor: color.MINOR_BG,\n            borderColor: color.MINOR_LINE,\n            borderWidth: 1,\n            data: minorArray,\n            pointRadius: 0,\n            datalabels: { display: false }\n          },\n          {\n            label: 'Major Alarm',\n            type: 'line',\n            fill: false,\n            backgroundColor: color.MAJOR_BG,\n            borderColor: color.MAJOR_LINE,\n            borderWidth: 1,\n            data: majorArray,\n            pointRadius: 0,\n            datalabels: { display: false }\n          }\n        ]\n      };\n      return { chartData: data, maxVal: maxVal};\n    });\n  }\n\n  componentDidMount() { this.timer = setInterval(this.updateContent, this.refreshInterval); }\n\n  componentWillUnmount() { clearInterval(this.timer); this.epics.disconnect(); }\n\n  renderBar() {\n    const { majorVal, minorVal, maxVal } = this.state;\n    const { customTooltipCallback } = this.props;\n    return (\n      <Bar\n        data={this.state.chartData}\n        plugins={[ChartDataLabels]}\n        options={{\n          plugins: {\n            datalabels: { rotation: 270, font: { weight: \"bold\" } },\n          },\n          tooltips: { mode: 'index', enabled: false, custom: customTooltipCallback },\n          maintainAspectRatio: false,\n          responsive: true,\n          legend: {\n            position: 'bottom', align: 'center',\n            display: false, labels: {}\n          },\n          scales: {\n            xAxes: [{\n              ticks: {},\n              gridLines: {\n                display: true,\n                color: 'rgba(184,184,184,0.2)',\n                zeroLineColor: 'rgba(184,184,184,0.8)'\n              },\n            }],\n            yAxes: [{\n              id: 'pressure',\n              scaleLabel: { display: true, labelString: 'mBar' },\n              gridLines: {\n                display: true,\n                color: 'rgba(184,184,184,0.2)',\n                zeroLineColor: 'rgba(184,184,184,0.8)'\n              },\n              ticks: {\n                min: 1e-12,\n                max: maxVal,\n                fontSize: 14,\n              },\n              display: true,\n              type: 'logarithmic',\n            }]\n          }\n        }}\n      />)\n  }\n\n  handleConfig = (hihi, high) => {\n    high = parseFloat(high);\n    hihi = parseFloat(hihi);\n    if ((hihi != this.state.majorVal || high != this.state.minorVal) && (high < hihi)) {\n      this.setState((state, props) => {\n        const { pvs } = props;\n        return { minorVal: high, majorVal: hihi, minorArray: pvs.map(() => high), majorArray: pvs.map(() => hihi) };\n      });\n    }\n  }\n\n  render() {\n    const { minorVal, majorVal } = this.state;\n    const { title, backHandler } = this.props;\n\n    return (\n      <div className='PressureBar'>\n        <div className='Title'>{title}</div>\n        <SettingsDialog\n          title={title + \" settings\"}\n          high={minorVal}\n          hihi={majorVal}\n          handleConfig={this.handleConfig} />\n        {this.state.chartData ? <article className='GraphContainer'> {this.renderBar()} </article> : 'loading...'}\n      </div>\n    );\n  }\n} export default PressureBar;\n","const SI = { hihi: 5e-8, high: 1e-8 };\nconst BO = { hihi: 5e-7, high: 1e-7 };\nexport { SI, BO };\n\n// class ProcessVariables {\n//     constructor(onComplete, onFailure ){\n//         if(!onComplete){\n//             this.onComplete = (res)=>{console.log(res)};\n//         }\n//         if(!onFailure){\n//             this.onFailure = (res)=>{console.log(res)};\n//         }\n//         this.loaded = false;\n//         this.pvs = [];\n//     }\n// }\n\n\n// var state = false;\n// var booster = [];\n\n// const URL = \"https://10.0.38.42/mgmt/bpl/getPVStatus?pv=BO*CCG*Pressure-Mon&limit=200\";\n\n// fetch(URL)\n//     .then(data=>data.json())\n//     .then(res=>{\n//         console.log(res);\n//         res.forEach(element => {\n//             booster.push(element.pvName);\n//         });\n//         state=true;\n//     })\n//     .catch(exception=>console.log(exception));\n\n// export { booster };","import React from 'react';\nimport PressureBar from './components/PressureBar';\n\nimport { Button, ButtonGroup } from '@material-ui/core';\n\nimport bo from './static/BO-CCG.json';\nimport si from './static/SI-CCG.json';\nimport fe from './static/FE-CCG.json';\nimport tb from './static/TB-CCG.json';\nimport ts from './static/TS-CCG.json';\n\nimport { SI, BO } from './utils/consts';\n\nimport './App.css';\n\nconst STATE = {\n  INITIAL: 0,\n  BO: 1,\n  SI: 2,\n  TB: 3,\n  TS: 4,\n  ALL: 5,\n  TB_TS: 6,\n  BO_TB_TS: 7,\n  FE: 8,\n  SI_FE: 9,\n  BO_TB_TS_FE: 10\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { content: STATE.INITIAL, tooltipVisible: false, tooltipX: '', tooltipY: '' };\n  }\n\n  customTooltipCallback = (tooltipModel) => {\n\n    if (tooltipModel.opacity === 0) {\n      this.setState({ tooltipVisible: false, tooltipX: '', tooltipY: '' });\n      return;\n    }\n\n    // set values\n    const x = tooltipModel.dataPoints[0].xLabel;\n    const y = tooltipModel.dataPoints[0].yLabel;\n\n    this.setState({ tooltipVisible: true, tooltipX: x, tooltipY: y });\n  }\n\n  renderNav = () => {\n    if (this.state.content !== STATE.INITIAL) {\n      return <div className='Menu'>\n        <Button variant=\"contained\" color=\"default\" onClick={() => this.setState({ content: STATE.INITIAL })}>Back</Button>\n      </div>\n    } else {\n      return <div className='Menu'>\n        <div className='MainTitle'>Sirius - Pressure Readings</div>\n        <div style={{ 'margin-bottom': '15px' }} className='SubTitle'>Cold Cathode Gauge</div>\n        <ButtonGroup orientation=\"vertical\" color=\"primary\"\n        >\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.BO })}>BO</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.SI })}>SI</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.TB })}>TB</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.TS })}>TS</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.FE })}>FE</Button><br />\n          <div><br></br></div>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.TB_TS })}>TB & TS</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.BO_TB_TS })}>BO, TB & TS</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.BO_TB_TS_FE })}>BO, TB, TS & FE</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.SI_FE })}>SI & FE</Button><br />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.setState({ content: STATE.ALL })}>ALL</Button><br />\n        </ButtonGroup>\n      </div>\n\n    }\n  }\n\n  renderCustomTooltip = () => {\n    return <table align='center'>\n      <tbody>\n        {this.state.tooltipVisible ? (\n          <tr>\n            <td>{this.state.tooltipX}</td>\n            <td>{this.state.tooltipY}</td>\n          </tr>\n        ) : (<tr>\n          <td>&nbsp;</td>\n          <td>&nbsp;</td>\n        </tr>)}\n      </tbody>\n    </table>\n  }\n\n  backHandler = () => this.setState({ content: STATE.INITIAL })\n\n  renderGraph = () => {\n    switch (this.state.content) {\n      case STATE.BO:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' {...BO} />\n      case STATE.TB:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure'  {...BO} />\n      case STATE.TS:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure'  {...BO} />\n      case STATE.SI:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={si} title='SI - Pressure'  {...SI} />\n      case STATE.FE:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={fe} title='FE - Pressure'  {...SI} />\n\n\n      case STATE.TB_TS:\n        return <div style={{ 'display': 'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap' }}>\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure'  {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure'  {...BO} />\n        </div>\n      case STATE.BO_TB_TS:\n        return <div style={{ 'display': 'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap' }}>\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure'  {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure'  {...BO} />\n        </div>\n      case STATE.BO_TB_TS_FE:\n        return <div style={{ 'display': 'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap' }}>\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure'  {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure'  {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure'  {...BO} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={fe} title='FE - Pressure'  {...SI} />\n        </div>\n\n      case STATE.SI_FE:\n        return <div>\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={si} title='SI - Pressure' {...SI} />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={fe} title='FE - Pressure' {...SI} />\n        </div>\n\n\n      case STATE.ALL:\n        return <div style={{ 'display': 'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap' }}>\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure' />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={si} title='SI - Pressure' />\n          <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={fe} title='FE - Pressure' />\n        </div>\n\n      default:\n        if (this.state.tooltipVisible) { this.setState({ tooltipVisible: false }); }\n        return <div></div>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderGraph()}\n        {this.renderCustomTooltip()}\n        {this.renderNav()}\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}