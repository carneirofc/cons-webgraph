{"version":3,"sources":["vendor/epics2web.js","utils/Network.js","utils/Epics.js","utils/Colors.js","components/PressureBar.jsx","App.js","serviceWorker.js","index.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","ClientConnection","options","defaultOptions","url","location","protocol","host","autoOpen","autoReconnect","autoLivenessPingAndTimeout","autoDisplayClasses","pingIntervalMillis","livenessTimoutMillis","reconnectWaitMillis","chunkedRequestPvsCount","clientName","href","key","this","socket","eventElem","createElement","lastUpdated","livenessTimer","reconnecting","addEventListener","onopen","onclose","onconnecting","onclosing","onerror","onmessage","oninfo","onupdate","onpong","bind","removeEventListener","dispatchEvent","open","readyState","WebSocket","CLOSED","console","log","u","encodeURIComponent","clearTimeout","isClosed","setTimeout","Date","json","JSON","parse","data","date","type","close","code","reason","monitorPvs","pvs","i","j","chunk","length","slice","monitorPvsChunk","msg","send","stringify","clearPvs","clearPvsChunk","ping","setInterval","OPEN","jlab","createClientConnection","Jlab","instance","epics2web","isNumericEpicsType","datatype","isNumeric","Network","epics2webHost","epics2webLocation","epics2webWs","epics2webOptions","Object","freeze","Epics","monitoredPVsList","disconnect","con","network","pvData","forEach","element","value","count","e","pv","Color","MAJOR_BG","MAJOR_LINE","OK_BG","OK_LINE","MINOR_BG","MINOR_LINE","INVALID_BG","INVALID_LINE","HOVER_LINE","defaults","global","defaultFontColor","defaultFontSize","PressureBar","props","updatePVValues","values","map","epics","alarms","bg","isNaN","minorVal","color","majorVal","border","updateContent","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","fill","minor","pointRadius","datalabels","display","major","setState","chartData","state","tooltipText","tooltipVisible","timer","refreshInterval","prevProps","prevState","snapshot","clearInterval","plugins","ChartDataLabels","rotation","font","weight","tooltips","mode","enabled","custom","customTooltipCallback","maintainAspectRatio","responsive","legend","position","align","scales","xAxes","ticks","gridLines","zeroLineColor","yAxes","id","scaleLabel","labelString","min","max","fontSize","className","title","renderBar","React","Component","defaultProps","STATE","App","tooltipModel","opacity","x","dataPoints","xLabel","y","yLabel","tooltipX","tooltipY","renderNav","content","onClick","renderCustomTooltip","renderGraph","bo","si","tb","ts","style","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29cef02b.chunk.js","sourcesContent":["\n/* BEGIN IE CustomEvent POLYFILL */\n(function () {\n    if (typeof window.CustomEvent === \"function\") {\n        return false;\n    }\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n})();\n/* END IE CustomEvent POLYFILL */\n\nclass ClientConnection {\n    constructor(options) {\n        options = (!options) ? {} : options;\n\n        let protocol = (window.location.protocol === 'https:') ? 'wss:' : 'ws:';\n\n        let defaultOptions = {\n            url: protocol + \"//\" + window.location.host + \"\" + \"/epics2web/monitor\",\n            autoOpen: true, /* Will automatically connect to socket immediately instead of waiting for open function to be called */\n            autoReconnect: true, /* If socket is closed, will automatically reconnect after reconnectWaitMillis */\n            autoLivenessPingAndTimeout: true, /* Will ping the server every pingIntervalMillis and if no response in livenessTimeoutMillis then will close the socket as invalid */\n            autoDisplayClasses: true, /* As connect state changes will hide and show elements with corresponding state classes: ws-disconnected, ws-connecting, ws-connected */\n            pingIntervalMillis: 3000, /* Time to wait between pings */\n            livenessTimoutMillis: 2000, /* Max time allowed for server to respond to a ping (via any message) */\n            reconnectWaitMillis: 1000, /* Time to wait after socket closed before attempting reconnect */\n            chunkedRequestPvsCount: 400, /* Max number of PVs to transmit in a chunked monitor or clear command; 0 to disable chunking */\n            clientName: window.location.href /* Client name is a string used for informational/debugging purposes (appears in console) */\n        };\n\n        for (let key in defaultOptions) {\n            if (typeof options[key] !== 'undefined') {\n                this[key] = options[key];\n            } else {\n                this[key] = defaultOptions[key];\n            }\n        }\n\n\n        // Private variables\n        this.socket = null;\n        this.eventElem = document.createElement('div');\n        this.lastUpdated = null;\n        this.livenessTimer = null;\n        this.reconnecting = false;\n\n        // Private functions\n        var doPingWithTimer = () =>{\n            /*console.log('pingWithTimer');*/\n            if (this.socket !== null && this.socket.readyState === WebSocket.OPEN) {\n                this.ping();\n\n                if (this.livenessTimer !== null) {\n                    /*console.log('pingWithTimer triggered while liveness timer running (keepAliveTimeout > keepAliveInterval)?');*/\n                } else {\n                    this.livenessTimer = setTimeout(function () {\n                        /*console.log('server liveness timer triggered');*/\n\n                        /*var elapsedMillis = Math.abs(new Date() - lastUpdated);\n                         \n                         console.log('Elapsed Millis: ' + elapsedMillis);\n                         console.log('Keepalive Timeout Millis: ' + self.livenessTimoutMillis);\n                         \n                         if(elapsedMillis > self.livenessTimoutMillis) {\n                         console.log('Ping/Pong Timeout');*/\n                        if (this.socket.readyState === WebSocket.OPEN) {\n                            this.socket.close();\n                        }\n                        //}\n\n                        this.livenessTimer = null;\n                    }, this.livenessTimoutMillis);\n                }\n            } else {\n                /*console.log('socket is not open: onclose may try to reconnect after a delay if not already reconnecting');*/\n            }\n        };\n\n        // Event wiring\n        this.eventElem.addEventListener('open',       (event) => { this.onopen(event); });\n        this.eventElem.addEventListener('close',      (event) => { this.onclose(event); });\n        this.eventElem.addEventListener('connecting', (event) => { this.onconnecting(event); });\n        this.eventElem.addEventListener('closing',    (event) => { this.onclosing(event); });\n        this.eventElem.addEventListener('error',      (event) => { this.onerror(event); });\n        this.eventElem.addEventListener('message',    (event) => { this.onmessage(event); });\n        this.eventElem.addEventListener('info',       (event) => { this.oninfo(event); });\n        this.eventElem.addEventListener('update',     (event) => { this.onupdate(event); });\n        this.eventElem.addEventListener('pong',       (event) => { this.onpong(event); });\n\n        this.addEventListener = this.eventElem.addEventListener.bind(this.eventElem);\n        this.removeEventListener = this.eventElem.removeEventListener.bind(this.eventElem);\n        this.dispatchEvent = this.eventElem.dispatchEvent.bind(this.eventElem);\n\n        // Public functions\n        this.open = () => {\n            if (this.socket === null || this.socket.readyState === WebSocket.CLOSED) {\n                var event = new CustomEvent('connecting');\n                this.eventElem.dispatchEvent(event);\n\n                let u = this.url;\n\n                if (this.clientName !== null) {\n                    u = u + '?clientName=' + encodeURIComponent(this.clientName);\n                }\n\n                this.socket = new WebSocket(u);\n\n                this.socket.onerror = (event) => {\n                    console.log(\"server connection error\", event);\n\n                    var evt = new CustomEvent('error');\n                    this.eventElem.dispatchEvent(evt);\n                };\n\n                this.socket.onclose = (event) => {\n                    console.log(\"server connection closed\");\n                    // console.log(event.reason);\n\n                    var evt = new CustomEvent('close');\n                    this.eventElem.dispatchEvent(evt);\n\n                    if (this.livenessTimer !== null) {\n                        clearTimeout(this.livenessTimer);\n                        this.livenessTimer = null;\n                    }\n\n                    var isClosed = this.socket === null || this.socket.readyState === WebSocket.CLOSED;\n                    if (this.autoReconnect && !this.reconnecting && isClosed) {\n                        console.log('attempting to reconnect after delay');\n                        this.reconnecting = true;\n                        setTimeout(() => {\n                            console.log('reconnect timer triggered');\n                            this.open();\n                            this.reconnecting = false;\n                        }, this.reconnectWaitMillis);\n                    } else {\n                        console.log('socket is not closed (socket is connecting, closing, or reconnecting / delayed connecting)');\n                    }\n                };\n\n                this.socket.onmessage = (event) => {\n                    // console.log('on message', event.data);\n\n                    if (this.livenessTimer !== null) {\n                        clearTimeout(this.livenessTimer);\n                        this.livenessTimer = null;\n                    }\n\n                    this.lastUpdated = new Date();\n                    var json = JSON.parse(event.data);\n                    json.date = this.lastUpdated;\n                    if (json.type === 'update') {\n                        this.eventElem.dispatchEvent(new CustomEvent('update', { 'detail': json }));\n                    } else if (json.type === 'info') {\n                        this.eventElem.dispatchEvent(new CustomEvent('info', { 'detail': json }));\n                    } else if (json.type === 'pong') {\n                        this.eventElem.dispatchEvent(new CustomEvent('pong'));\n                    }\n\n                    this.eventElem.dispatchEvent(new CustomEvent('message'), { 'detail': json });\n                };\n\n                this.socket.onopen = (event) => {\n                    console.log('server connection open');\n                    this.lastUpdated = new Date();\n\n                    var evt = new CustomEvent('open');\n                    this.eventElem.dispatchEvent(evt);\n                };\n            } else {\n                console.log('already connected');\n                return 1;\n            }\n        };\n\n        this.close = (code, reason) => {\n            console.log('close');\n            if (this.socket !== null && this.socket.readyState !== WebSocket.CLOSED) {\n                if (typeof code === 'undefined') {\n                    code = 1000;\n                }\n                this.socket.close(code, reason);\n            } else {\n                console.log('already closed');\n            }\n        };\n\n        this.monitorPvs = (pvs) => {\n            if (this.chunkedRequestPvsCount > 0) {\n                var i, j, chunk;\n                for (i = 0, j = pvs.length; i < j; i += this.chunkedRequestPvsCount) {\n                    chunk = pvs.slice(i, i + this.chunkedRequestPvsCount);\n                    this.monitorPvsChunk(chunk);\n                }\n            } else {\n                this.monitorPvsChunk(pvs);\n            }\n        };\n\n        this.monitorPvsChunk = (pvs) => {\n            var msg = { type: 'monitor', pvs: pvs };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        this.clearPvs = (pvs) => {\n            if (this.chunkedRequestPvsCount > 0) {\n                var i, j, chunk;\n                for (i = 0, j = pvs.length; i < j; i += this.chunkedRequestPvsCount) {\n                    chunk = pvs.slice(i, i + this.chunkedRequestPvsCount);\n                    this.clearPvsChunk(chunk);\n                }\n            } else {\n                this.clearPvsChunk(pvs);\n            }\n        };\n\n        this.clearPvsChunk = (pvs) => {\n            var msg = { type: 'clear', pvs: pvs };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        this.ping = () => {\n            var msg = { type: 'ping' };\n            this.socket.send(JSON.stringify(msg));\n        };\n\n        if (this.autoDisplayClasses === true) {\n            this.eventElem.addEventListener('connecting', (event) =>{\n                console.log('connecting');\n            });\n            this.eventElem.addEventListener('open', (event) =>{\n                console.log('open');\n            });\n            this.eventElem.addEventListener('close', (event) =>{\n                console.log('close');\n            });\n        }\n\n        if (this.autoOpen === true) {\n            this.open();\n        }\n\n        if (this.autoLivenessPingAndTimeout === true) {\n            window.setInterval(doPingWithTimer, this.pingIntervalMillis);\n        }\n    }\n\n}\n\nClientConnection.prototype.onopen = function () { };\nClientConnection.prototype.onclose = function () { };\nClientConnection.prototype.onconnecting = function () { };\nClientConnection.prototype.onclosing = function () { };\nClientConnection.prototype.onmessage = function () { };\nClientConnection.prototype.onerror = function () { };\nClientConnection.prototype.onupdate = function () { };\nClientConnection.prototype.oninfo = function () { };\nClientConnection.prototype.onpong = function () { };\n\nclass Jlab {\n    constructor() {\n        if (!Jlab.instance) {\n            Jlab.instance = this;\n            this.epics2web = {};\n            // this.contextPrefix = '';\n        }\n    }\n\n    createClientConnection = (options)=> { return new ClientConnection(options) };\n    \n}\n\nconst jlab = new Jlab();\n\njlab.epics2web.isNumericEpicsType = function (datatype) {\n    var isNumeric;\n\n    switch (datatype) {\n        case 'DBR_DOUBLE':\n        case 'DBR_FLOAT':\n        case 'DBR_INT':\n        case 'DBR_SHORT':\n        case 'DBR_BYTE':\n            isNumeric = true;\n            break;\n        default:\n            isNumeric = false;\n    }\n\n    return isNumeric;\n};\n\nexport { jlab };","class Network{\n   constructor() {\n        if(! Network.instance){\n            Network.instance = this;\n        }\n\n        this.epics2webHost = '10.0.38.42';\n        this.epics2webLocation = '/epics2web';\n        this.epics2webWs = \n            'ws://' + this.epics2webHost + this.epics2webLocation + '/monitor';\n        this.epics2webOptions = {\n            url: this.epics2webWs,\n            autoOpen: true,\n            autoReconnect: true,\n            autoLivenessPingAndTimeout: true,\n            autoDisplayClasses: true,\n            pingIntervalMillis: 3000,\n            livenessTimoutMillis: 2000,\n            reconnectWaitMillis: 1000,\n            chunkedRequestPvsCount: 400\n        };\n\n        return Network.instance;\n   } \n}\n\nconst instance = new Network();\nObject.freeze(instance);\n\nexport {instance as network};\n\n","import { jlab } from '../vendor/epics2web';\nimport { network } from '../utils/Network';\n\nclass Epics {\n    constructor(monitoredPVsList) {\n        this.monitoredPVsList = monitoredPVsList;\n\n        this.con = jlab.createClientConnection(network.epics2webOptions);\n\n        this.pvData = {}\n        this.monitoredPVsList.forEach(element => {\n            this.pvData[element] = { date:null, value:null, datatype:null, count:null};\n        });\n\n        this.con.onopen = (e) => {\n            // console.log('Socket Connected');\n            this.con.monitorPvs(this.monitoredPVsList);\n        };\n\n        this.con.onupdate = (e) => {\n            // console.log('PV: ', e.detail.pv, e.detail.date, e.detail.value);\n            this.pvData[e.detail.pv].date = e.detail.date;\n            this.pvData[e.detail.pv].value = e.detail.value;\n        };\n\n        this.con.oninfo = (e) => {\n            // console.log('Info: ', e.detail);\n\n            this.pvData[e.detail.pv].datatype = e.detail.datatype;\n            this.pvData[e.detail.pv].count = e.detail.count;\n            this.pvData[e.detail.pv].date = e.detail.date;\n\n            if (typeof e.detail['enum-labels'] !== 'undefined') {\n                console.log('Enum Labels: ' + e.detail['enum-labels']);\n            }\n        };\n    }\n\n    disconnect = ()=>{\n        if(this.con){\n            this.con.autoReconnect = false;\n            this.con.close();\n        }\n    }\n}\nexport default Epics;","class Color{\n    constructor(){\n        if(! Color.instance){\n            Color.instance = this;\n        }\n\n        this.MAJOR_BG = 'rgba(245,0,0,0.8)';\n        this.MAJOR_LINE = 'rgba(245,0,0,1)';\n\n        this.OK_BG = 'rgba(65,190,60,0.9)';\n        this.OK_LINE = 'rgba(65,190,60,0.6)';\n\n        this.MINOR_BG = 'rgba(359, 200, 0, 0.8)';\n        this.MINOR_LINE = 'rgba(359 ,200, 0, 1)';\n\n        this.INVALID_BG = 'rgba(255, 0, 183, 0.8)'\n        this.INVALID_LINE = 'rgba(255, 0, 183, 1)'\n\n        this.HOVER_LINE = '#FFFFFF';\n\n        return Color.this;\n    }\n}\n\nconst instance = new Color();\nObject.freeze(instance);\n\nexport {instance as color};\n","\nimport React from 'react';\nimport Epics from '../utils/Epics';\n\nimport { Bar, defaults } from 'react-chartjs-2';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nimport { color } from '../utils/Colors';\nimport \"./PressureBar.css\";\n\ndefaults.global.defaultFontColor = \"#FFF\";\ndefaults.global.defaultFontSize = 16;\n\nclass PressureBar extends React.Component {\n  static defaultProps = {\n    title: \"A graph\"\n\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltipText: \"\",\n      tooltipVisible: false\n    };\n    this.timer = null;\n    this.refreshInterval = 100;\n    this.epics = new Epics(this.props.pvs);\n\n    this.minorVal = 1e-9;\n    this.majorVal = 1e-8;\n\n    this.minor = this.props.pvs.map(() => this.minorVal);\n    this.major = this.props.pvs.map(() => this.majorVal);\n\n    this.values = [];\n    this.alarms = { bg: [], border: [] };\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    /** Check if there's a new PV list */\n  }\n\n  updatePVValues = () => {\n    this.values = this.props.pvs.map(pv => {\n      return this.epics.pvData[pv].value;\n    });\n\n    this.alarms.bg = this.values.map(value => {\n      if (value && !isNaN(value)) {\n        if (value < this.minorVal) {\n          return color.OK_BG;\n        } else if (value >= this.minorVal && value < this.majorVal) {\n          return color.MINOR_BG;\n        } else {\n          return color.MAJOR_BG;\n        }\n      } else {\n        /** I'm returning OK here so because invalid numbers will not be plotted so this will only mess up the legend in case the first PV is invalid */\n        return color.OK_BG; // return color.INVALID_BG;\n      }\n    });\n\n    this.alarms.border = this.values.map(value => {\n      if (value && !isNaN(value)) {\n        if (value < this.minorVal) {\n          return color.OK_LINE;\n        } else if (value >= this.minorVal && value < this.majorVal)\n          return color.MINOR_LINE;\n      } else {\n        /** Same as the alarm.bg*/\n        return color.OK_LINE; // return color.INVALID_LINE;\n      }\n    });\n  }\n\n  updateContent = () => {\n    this.updatePVValues();\n    let data = {\n      labels: this.props.pvs,\n      datasets: [\n        {\n          label: 'MKS - Cold Cathode',\n          backgroundColor: this.alarms.bg,\n          borderColor: this.alarms.border,\n          borderWidth: 1,\n          hoverBackgroundColor: color.OK_BG,\n          hoverBorderColor: color.HOVER_LINE,\n          data: this.values,\n        },\n        {\n          label: 'Minor Alarm',\n          type: 'line',\n          fill: false,\n          backgroundColor: color.MINOR_BG,\n          borderColor: color.MINOR_LINE,\n          borderWidth: 1,\n          data: this.minor,\n          pointRadius: 0,\n          datalabels:{ display:  false}\n        },\n        {\n          label: 'Major Alarm',\n          type: 'line',\n          fill: false,\n          backgroundColor: color.MAJOR_BG,\n          borderColor: color.MAJOR_LINE,\n          borderWidth: 1,\n          data: this.major,\n          pointRadius: 0,\n          datalabels:{ display:  false}\n        }\n      ]\n    };\n\n    this.setState({ chartData: data });\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(\n      this.updateContent,\n      this.refreshInterval\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.epics.disconnect();\n  }\n\n  renderBar() {\n    return (\n      <Bar\n        data={this.state.chartData}\n        plugins={[ChartDataLabels]}\n        options={{\n          plugins:{\n            datalabels:{\n              rotation: 270,\n              font: {\n                weight:\"bold\"\n              }\n              // formatter: (text)=> { return text+ 'as'; }\n            }\n          },\n          tooltips: {\n            mode: 'index',\n            enabled: false,\n            custom: this.props.customTooltipCallback\n            // custom: this.customTooltip\n          },\n          maintainAspectRatio: false,\n          responsive: true,\n          legend: {\n            position: 'bottom',\n            align: 'center',\n            display: false,\n            labels: {}\n          },\n          scales: {\n            xAxes: [{\n              ticks: {},\n              gridLines: {\n                display: true,\n                color: 'rgba(184,184,184,0.2)',\n                zeroLineColor: 'rgba(184,184,184,0.8)'\n              },\n            }],\n            yAxes: [{\n              id: 'pressure',\n              scaleLabel: { display: true, labelString: 'mBar' },\n              gridLines: {\n                display: true,\n                color: 'rgba(184,184,184,0.2)',\n                zeroLineColor: 'rgba(184,184,184,0.8)'\n              },\n              ticks: {\n                min: 1e-12,\n                max: 1e-7,\n                fontSize: 14,\n              },\n              display: true,\n              type: 'logarithmic',\n            }]\n          }\n        }}\n      />)\n  }\n\n  render() {\n    return (\n      <div className='PressureBar'>\n        <div className='Title'>{this.props.title}</div>\n        {this.state.chartData ? <article className='GraphContainer'> {this.renderBar()} </article> : 'loading...'}\n      </div>\n    );\n  }\n} export default PressureBar;\n","import React from 'react';\nimport PressureBar from './components/PressureBar';\n\nimport bo from './static/BO-CCG.json';\nimport si from './static/SI-CCG.json';\nimport tb from './static/TB-CCG.json';\nimport ts from './static/TS-CCG.json';\n\nimport './App.css';\n\nconst STATE = {\n  INITIAL: 0,\n  BO: 1,\n  SI: 2,\n  TB: 3,\n  TS: 4,\n  ALL: 5,\n  TB_TS: 6,\n  BO_TB_TS: 7\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { content: STATE.INITIAL, tooltipVisible: false, tooltipX: '', tooltipY: ''};\n  }\n\n  customTooltipCallback = (tooltipModel) => {\n\n    if (tooltipModel.opacity === 0) {\n      this.setState({ tooltipVisible: false });\n      return;\n    }\n\n    // set values\n    const x = tooltipModel.dataPoints[0].xLabel;\n    const y = tooltipModel.dataPoints[0].yLabel;\n\n    this.setState({ tooltipVisible: true, tooltipX: x, tooltipY: y });\n  }\n\n  renderNav = () => {\n    if (this.state.content !== STATE.INITIAL) {\n      return <div className='Menu'>\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.INITIAL })}>Back</button>\n      </div>\n    } else {\n      return <div className='Menu'>\n        <div className='MainTitle'>Sirius - Pressure Readings</div>\n        <div className='SubTitle'>Cold Cathode Gauge</div>\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.BO })}>BO</button><br />\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.SI })}>SI</button><br />\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.TB_TS })}>TB & TS</button><br />\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.BO_TB_TS })}>BO, TB & TS</button><br />\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.TB})}>TB</button><br/>\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.TS})}>TS</button><br/>\n        <button type=\"button\" onClick={() => this.setState({ content: STATE.ALL })}>ALL</button><br />\n      </div>\n\n    }\n  }\n\n    renderCustomTooltip = ()=>{\n        return <table align='center'>\n          <tbody>\n            {this.state.tooltipVisible ? (\n              <tr>\n                <td>{this.state.tooltipX}</td>\n                <td>{this.state.tooltipY}</td>\n              </tr>\n            ) : (<tr>\n              <td>&nbsp;</td>\n              <td>&nbsp;</td>\n            </tr>)}\n          </tbody>\n        </table>\n    }\n\n  renderGraph = () => {\n    switch (this.state.content) {\n      case STATE.BO:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' />\n      case STATE.SI:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={si} title='SI - Pressure' />\n      case STATE.TB:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure' />\n      case STATE.TS:\n        return <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n      case STATE.TB_TS:\n        return <div style={{'display':'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap'}}>\n              <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure' />\n              <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n          </div>\n      case STATE.BO_TB_TS:\n        return <div style={{'display':'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap'}}>\n              <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' />\n              <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n              <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n          </div>\n      case STATE.ALL:\n        return <div style={{'display':'flex', 'flex-direction': 'row', 'flex-wrap': 'wrap'}}>\n             <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={bo} title='BO - Pressure' />\n             <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={tb} title='TB - Pressure' />\n             <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={ts} title='TS - Pressure' />\n             <PressureBar customTooltipCallback={this.customTooltipCallback} pvs={si} title='SI - Pressure' />\n          </div>\n\n      default:\n        return <div></div>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderGraph()}\n        {this.renderCustomTooltip()}\n        {this.renderNav()}\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}